generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String?  // Optional for OAuth users
  image     String?  // Optional profile image
  isAdmin   Boolean  @default(false)
  verified  Boolean  @default(false)
  accounts  Account[]
  sessions  Session[]
  reviews   Review[] @relation("UserReviews")
  comments  Comment[] @relation("UserComments")
  votes     Vote[] @relation("UserVotes")
  createdAt DateTime @default(now())
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  isAnonymous Boolean  @default(false)
  title       String
  content     String
  tags        String
  location    String
  image       String?
  star        Int
  userName    String?
  userAvatar  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // For soft deletes

  user        User     @relation(fields: [userId], references: [id], name: "UserReviews")
  comments    Comment[] @relation("ReviewComments")
  votes       Vote[] @relation("ReviewVotes")
}

model Comment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  reviewId   String    @db.ObjectId
  userId     String    @db.ObjectId
  isAnonymous Boolean  @default(false)
  content    String
  parentId   String?   @db.ObjectId
  userName   String?
  userAvatar String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  review     Review    @relation(fields: [reviewId], references: [id], name: "ReviewComments")
  user       User      @relation(fields: [userId], references: [id], name: "UserComments")
  replies    Comment[] @relation("CommentReplies")
  votes      Vote[]    @relation("CommentVotes")
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Vote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], name: "UserVotes")
  userId     String   @db.ObjectId
  review     Review?  @relation(fields: [reviewId], references: [id], name: "ReviewVotes")
  reviewId   String?  @db.ObjectId
  comment    Comment? @relation(fields: [commentId], references: [id], name: "CommentVotes")
  commentId  String?  @db.ObjectId
  value      Int      // 1 for upvote, -1 for downvote
  createdAt  DateTime @default(now())

  @@unique([userId, reviewId])
  @@unique([userId, commentId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SupportMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId // Optional if submitted by a non-logged-in user
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Report {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  reviewId     String    @db.ObjectId
  reporterUserId String  @db.ObjectId
  reason       String    // e.g., "False Info", "Offensive or Abusive", "Other"
  otherReason  String?   // Optional text input for "Other" reason
  createdAt    DateTime  @default(now())

  // Relations
  review       Review    @relation(fields: [reviewId], references: [id])
  reporter     User      @relation(fields: [reporterUserId], references: [id])

  @@unique([reviewId, reporterUserId]) // User can only flag once per review
}
